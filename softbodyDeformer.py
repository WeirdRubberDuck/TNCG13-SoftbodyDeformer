# softbodyDeformer.py

# Import dependencies
import sys
import maya.OpenMayaMPx as OpenMayaMPx
import maya.OpenMaya as OpenMaya
import maya.OpenMayaAnim as OpenMayaAnim

#sys.path.append( 'H:/TNCG13' );

import deformable  # OBS! Modules are not reloaded unless MAYA is restarted.

# Plug-in information:
kPluginNodeName = 'softbodyDeformer'     # The name of the node.
kPluginNodeId = OpenMaya.MTypeId( 0x00000002 ) # A unique ID associated to this node type.

# Some global variables were moved from MPxDeformerNode to MPxGeometryFilter. 
# Set some constants to the proper C++ cvars based on the API version.
import maya.cmds as cmds
kApiVersion = cmds.about(apiVersion=True)
if kApiVersion < 201600:
    kInput = OpenMayaMPx.cvar.MPxDeformerNode_input
    kInputGeom = OpenMayaMPx.cvar.MPxDeformerNode_inputGeom
    kOutputGeom = OpenMayaMPx.cvar.MPxDeformerNode_outputGeom
    kEnvelope = OpenMayaMPx.cvar.MPxDeformerNode_envelope
else:
    kInput = OpenMayaMPx.cvar.MPxGeometryFilter_input
    kInputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom
    kOutputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_outputGeom
    kEnvelope = OpenMayaMPx.cvar.MPxGeometryFilter_envelope


##########################################################
# Plug-in 
##########################################################
class SoftbodyDeformerNode(OpenMayaMPx.MPxDeformerNode):
    
    # Static variable(s) which will later be replaced by the node's attribute(s).
    time = OpenMaya.MObject()
    deformableObject = deformable.Deformable()
    initialized = False

    def __init__(self):
        ''' Constructor. '''
        # (!) Make sure you call the base class's constructor.
        OpenMayaMPx.MPxDeformerNode.__init__(self)
    #END
    
    # pGeometryIterator (MItGeometry)
    def deform(self, pDataBlock, pGeometryIterator, pLocalToWorldMatrix, pGeometryIndex):
        ''' Deform each vertex using the geometry iterator. '''

        # The envelope determines the overall weight of the deformer on the mesh.
        # The envelope is obtained via the OpenMayaMPx.cvar.MPxDeformerNode_envelope (pre Maya 2016) or
        # OpenMayaMPx.cvar.MPxGeometryFilter_envelope (Maya 2016) variable.
        # This variable and others like it are generated by SWIG to expose variables or constants declared in C++ header files. 
        envelopeAttribute = kEnvelope
        envelopeValue = pDataBlock.inputValue( envelopeAttribute ).asFloat()
        
        # Get the values for attributes.
        timeHandle = pDataBlock.inputValue(SoftbodyDeformerNode.time)
        tempTime = timeHandle.asTime()

        dObj = SoftbodyDeformerNode.deformableObject

        print 'time = ' + str(tempTime.value())  # OBS!  How do we update this value??? Make a callback function?
        
        # Get the input mesh from the datablock using our getDeformerInputGeometry() helper function.     
        inputGeometryObject = self.getDeformerInputGeometry(pDataBlock, pGeometryIndex)     # OBS! Perhaps use this to get the rest positions instead?

        # IF not initialized: Initialize rest shape
        if(not SoftbodyDeformerNode.initialized) :

            print 'Initializing deformable object...'

            # Save original positions of all points into another object
            restPositions = []
            
            while not pGeometryIterator.isDone():

                # Add the position to the list of rest positions
                pos = pGeometryIterator.position() 
                restPositions.append(pos)

                print ('old y: ' + str(pos.y))
                
                # Jump to the next vertex.
                pGeometryIterator.next()
            
            #END WHILE
            
            dObj = deformable.Deformable(restPositions)

            SoftbodyDeformerNode.initialized = True

        # ELSE: Update shape
        #else:
   
            # Apply forces
            
            dObj.applyForces()
            newPositions = dObj.getPositions()  # OBS! There is a class called MPointArray, perhaps use that? For rest positions as well.

            # Update the object's positions     
            pGeometryIterator.reset()   # OBS! Temporary fix to be able to loop through the points again.  
            while not pGeometryIterator.isDone():

                print 'inside while'
                idx = pGeometryIterator.index()
                
                # TEST: Print old pos
                pos = pGeometryIterator.position() 
                print ('old y: ' + str(pos.y))

                # Set the new position
                newPos = newPositions[idx]
                # print type(newPos) # maya.OpenMaya.MPoint
                pGeometryIterator.setPosition(newPos) # OBS!! The position is set sucessfully, but does not produce visual result in Maya...
                
                # TEST: Print old pos (works!)
                pos = pGeometryIterator.position() 
                print ('new y: ' + str(pos.y))
                
                # Jump to the next vertex.
                pGeometryIterator.next()
            
            #END WHILE
            
            # Update positions using forces and shape matching

        #END IF
        
    #END
    
    def getDeformerInputGeometry(self, pDataBlock, pGeometryIndex):
        '''
        Obtain a reference to the input mesh. This mesh will be used to compute our bounding box, and we will also require its normals.
        
        We use MDataBlock.outputArrayValue() to avoid having to recompute the mesh and propagate this recomputation throughout the 
        Dependency Graph.
        
        OpenMayaMPx.cvar.MPxDeformerNode_input and OpenMayaMPx.cvar.MPxDeformerNode_inputGeom (for pre Maya 2016) and 
        OpenMayaMPx.cvar.MPxGeometryFilter_input and OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom (Maya 2016) are SWIG-generated 
        variables which respectively contain references to the deformer's 'input' attribute and 'inputGeom' attribute.   
        '''
        inputAttribute = OpenMayaMPx.cvar.MPxGeometryFilter_input
        inputGeometryAttribute = OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom
        
        inputHandle = pDataBlock.outputArrayValue( inputAttribute )
        inputHandle.jumpToElement( pGeometryIndex )
        inputGeometryObject = inputHandle.outputValue().child( inputGeometryAttribute ).asMesh()
        
        return inputGeometryObject
    #END
#END

##########################################################
# Plug-in initialization.
##########################################################
def nodeCreator():
    ''' Creates an instance of our node class and delivers it to Maya as a pointer. '''
    return OpenMayaMPx.asMPxPtr( SoftbodyDeformerNode() )
#END

def nodeInitializer():
    ''' Defines the input and output attributes as static variables in our plug-in class. '''
    # The following MFnNumericAttribute function set will allow us to create our attributes.
    numericAttributeFn = OpenMaya.MFnNumericAttribute()
    unitAttributeFn = OpenMaya.MFnUnitAttribute()

    #==================================
    # INPUT NODE ATTRIBUTE(S)
    #==================================

    SoftbodyDeformerNode.time = unitAttributeFn.create('time', 't', OpenMaya.MFnUnitAttribute.kTime, 0.0)
    unitAttributeFn.setDefault(OpenMayaAnim.MAnimControl.currentTime())
    unitAttributeFn.setChannelBox(True)
    SoftbodyDeformerNode.addAttribute(SoftbodyDeformerNode.time)

    ''' The input geometry node attribute is already declared in OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom '''

    #==================================
    # OUTPUT NODE ATTRIBUTE(S)
    #==================================

    ''' The output geometry node attribute is already declared in OpenMayaMPx.cvar.MPxGeometryFilter_outputGeom '''

    #==================================
    # NODE ATTRIBUTE DEPENDENCIES
    #==================================
    # If any of the inputs change, the output mesh will be recomputed.

    print dir(OpenMayaMPx.cvar)

    SoftbodyDeformerNode.attributeAffects(SoftbodyDeformerNode.time, kOutputGeom)
#END

def initializePlugin( mobject ):
    ''' Initialize the plug-in '''
    mplugin = OpenMayaMPx.MFnPlugin( mobject )

    try:
        mplugin.registerNode( kPluginNodeName, kPluginNodeId, nodeCreator,
                              nodeInitializer, OpenMayaMPx.MPxNode.kDeformerNode )
    except:
        sys.stderr.write( 'Failed to register node: ' + kPluginNodeName )
        raise
#END

def uninitializePlugin( mobject ):
    ''' Uninitializes the plug-in '''
    mplugin = OpenMayaMPx.MFnPlugin( mobject )
    try:
        mplugin.deregisterNode( kPluginNodeId )
    except:
        sys.stderr.write( 'Failed to deregister node: ' + kPluginNodeName )
        raise
#END

##########################################################
# Sample usage.
##########################################################
''' 
# Copy the following lines and run them in Maya's Python Script Editor:

import maya.cmds as cmds
cmds.loadPlugin( 'H:\TNCG13\softbodyDeformer.py' )
cmds.polyCube()
cmds.deformer( type='softbodyDeformer' )

# OBS! To avoid Maya crash when reloading plugin:
# Delete any created objects connected with the deformer and 
# run the following MEL command: 

 file -new

'''	